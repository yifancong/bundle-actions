name: Build

on: [pull_request, push]

jobs:
  Build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    permissions:
      contents: read      # ËØªÂèñ‰ªìÂ∫ìÂÜÖÂÆπ„ÄÅÂàÜÊîØ„ÄÅcommit ‰ø°ÊÅØ
      actions: read       # ËØªÂèñ workflow runs Âíå artifacts
      pull-requests: read # ËØªÂèñ PR ‰ø°ÊÅØ
      checks: read        # ËØªÂèñÊ£ÄÊü•Áä∂ÊÄÅ
      # ÁßÅÊúâ‰ªìÂ∫ìÂèØËÉΩÈúÄË¶Å‰ª•‰∏ãÊùÉÈôêÔºö
      # issues: read       # ËØªÂèñ issues (Â¶ÇÊûúÈúÄË¶Å)
      # packages: read     # ËØªÂèñÂåÖ‰ø°ÊÅØ (Â¶ÇÊûú‰ΩøÁî® GitHub Packages)

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Pnpm
        run: |
          npm install -g corepack@latest --force
          corepack enable

      - name: Setup Node.js 22.x
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 22.x
          cache: 'pnpm'

      - name: Install Dependencies and Build
        run: |
          pnpm install --ignore-scripts
          pnpm run build
          
      - name: Build Demo Project
        run: |
          cd examples/rsbuild-demo
          pnpm install
          pnpm run build
          
      - name: Verify Rsdoctor Data
        run: |
          if [ -f "examples/rsbuild-demo/dist/.rsdoctor/rsdoctor-data.json" ]; then
            echo "‚úÖ Rsdoctor data file found"
            ls -la examples/rsbuild-demo/dist/.rsdoctor/
          else
            echo "‚ùå Rsdoctor data file not found"
            echo "Available files in dist:"
            find examples/rsbuild-demo/dist -type f 2>/dev/null || echo "No dist directory found"
            exit 1
          fi

      - name: Debug Git Information
        run: |
          echo "üîç Git branch information:"
          git branch -a
          echo ""
          echo "üîç Git remote information:"
          git remote -v
          echo ""
          echo "üîç Current commit:"
          git rev-parse HEAD
          echo ""
          echo "üîç Available branches:"
          git ls-remote --heads origin | head -10

      - name: Verify GitHub Token Permissions
        run: |
          echo "üîç Testing GitHub API access..."
          
          # Test repository access
          echo "üìã Testing repository access..."
          REPO_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.RSDOCTOR_CI_TOKEN }}" \
                               -H "Accept: application/vnd.github.v3+json" \
                               "https://api.github.com/repos/${{ github.repository }}")
          
          if echo "$REPO_RESPONSE" | jq -e '.name' > /dev/null 2>&1; then
            echo "‚úÖ Repository access: $(echo "$REPO_RESPONSE" | jq -r '.name')"
            echo "üìä Repository is private: $(echo "$REPO_RESPONSE" | jq -r '.private')"
            echo "üîë Repository permissions: $(echo "$REPO_RESPONSE" | jq -r '.permissions')"
          else
            echo "‚ùå Repository access failed"
            echo "Response: $REPO_RESPONSE"
          fi
          
          echo ""
          echo "üîç Testing Actions API access..."
          # Test actions access
          ACTIONS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.RSDOCTOR_CI_TOKEN }}" \
                                  -H "Accept: application/vnd.github.v3+json" \
                                  "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?per_page=1")
          
          if echo "$ACTIONS_RESPONSE" | jq -e '.total_count' > /dev/null 2>&1; then
            echo "‚úÖ Actions access: $(echo "$ACTIONS_RESPONSE" | jq -r '.total_count') artifacts found"
          else
            echo "‚ùå Actions access failed"
            echo "Response: $ACTIONS_RESPONSE"
          fi
          
          echo ""
          echo "üîç Testing specific artifact access..."
          # Test specific artifact access (if we know the ID)
          if [ -n "${{ github.event.workflow_run.artifacts_url }}" ]; then
            echo "üì¶ Testing artifact download capability..."
            # This will test if we can access artifact download URLs
            curl -s -H "Authorization: token ${{ secrets.RSDOCTOR_CI_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" \
                 | jq -r '.artifacts[0:3] | .[] | "ID: \(.id), Name: \(.name), Expired: \(.expired_at // "Not expired")"'
          fi
          
          echo ""
          echo "üîç Testing branch access..."
          # Test branch access
          BRANCH_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.RSDOCTOR_CI_TOKEN }}" \
                                 -H "Accept: application/vnd.github.v3+json" \
                                 "https://api.github.com/repos/${{ github.repository }}/branches/main")
          
          if echo "$BRANCH_RESPONSE" | jq -e '.name' > /dev/null 2>&1; then
            echo "‚úÖ Branch access: $(echo "$BRANCH_RESPONSE" | jq -r '.name')"
            echo "üìù Latest commit: $(echo "$BRANCH_RESPONSE" | jq -r '.commit.sha')"
          else
            echo "‚ùå Branch access failed"
            echo "Response: $BRANCH_RESPONSE"
          fi

      - name: Report Compressed Size
        uses: ./
        with:
          github_token: ${{ secrets.RSDOCTOR_CI_TOKEN }}
          file_path: 'examples/rsbuild-demo/dist/.rsdoctor/rsdoctor-data.json'
          target_branch: 'main'